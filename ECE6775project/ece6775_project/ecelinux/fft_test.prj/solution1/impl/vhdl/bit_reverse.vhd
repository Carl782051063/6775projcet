-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bit_reverse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_we0 : OUT STD_LOGIC;
    X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_we0 : OUT STD_LOGIC;
    X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bit_reverse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln1830_fu_121_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1830_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1830_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_135_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_6_reg_213 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_147_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rev_fu_161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1832_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1834_fu_179_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1846_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1846_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_R_addr_2_reg_240 : STD_LOGIC_VECTOR (13 downto 0);
    signal X_I_addr_2_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_assign_reg_78 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reversed_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1844_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_reg_101 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0_i_reg_112 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1849_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1848_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1833_fu_153_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1832_fu_157_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_assign_1_fu_169_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1844_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_101 <= ap_const_lv4_0;
            elsif (((icmp_ln1832_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_101 <= i_fu_147_p2;
            end if; 
        end if;
    end process;

    input_assign_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                input_assign_reg_78 <= i_6_reg_213;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                input_assign_reg_78 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1844_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_i_reg_112 <= trunc_ln1830_fu_121_p1;
            elsif (((icmp_ln1832_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_i_reg_112 <= zext_ln1834_fu_179_p1;
            end if; 
        end if;
    end process;

    reversed_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1844_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reversed_reg_90 <= ap_const_lv32_0;
            elsif (((icmp_ln1832_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reversed_reg_90 <= rev_fu_161_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1846_fu_183_p2 = ap_const_lv1_1) and (icmp_ln1832_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                X_I_addr_2_reg_245 <= zext_ln1849_fu_188_p1(14 - 1 downto 0);
                X_R_addr_2_reg_240 <= zext_ln1849_fu_188_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_213 <= i_6_fu_135_p2;
                    zext_ln1830_reg_205(14 downto 0) <= zext_ln1830_fu_125_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1832_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln1846_reg_236 <= icmp_ln1846_fu_183_p2;
            end if;
        end if;
    end process;
    zext_ln1830_reg_205(31 downto 15) <= "00000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln1832_fu_141_p2, icmp_ln1846_fu_183_p2, icmp_ln1844_fu_129_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1844_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1846_fu_183_p2 = ap_const_lv1_0) and (icmp_ln1832_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((icmp_ln1846_fu_183_p2 = ap_const_lv1_1) and (icmp_ln1832_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    X_I_address0_assign_proc : process(ap_CS_fsm_state3, X_I_addr_2_reg_245, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln1849_fu_188_p1, zext_ln1848_fu_194_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            X_I_address0 <= X_I_addr_2_reg_245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_address0 <= zext_ln1848_fu_194_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_I_address0 <= zext_ln1849_fu_188_p1(14 - 1 downto 0);
        else 
            X_I_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            X_I_ce0 <= ap_const_logic_1;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_d0 <= X_I_q0;

    X_I_we0_assign_proc : process(icmp_ln1846_reg_236, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1846_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            X_I_we0 <= ap_const_logic_1;
        else 
            X_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_address0_assign_proc : process(ap_CS_fsm_state3, X_R_addr_2_reg_240, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln1849_fu_188_p1, zext_ln1848_fu_194_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            X_R_address0 <= X_R_addr_2_reg_240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_address0 <= zext_ln1848_fu_194_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_R_address0 <= zext_ln1849_fu_188_p1(14 - 1 downto 0);
        else 
            X_R_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            X_R_ce0 <= ap_const_logic_1;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_d0 <= X_R_q0;

    X_R_we0_assign_proc : process(icmp_ln1846_reg_236, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln1846_reg_236 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            X_R_we0 <= ap_const_logic_1;
        else 
            X_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1844_fu_129_p2)
    begin
        if ((((icmp_ln1844_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1844_fu_129_p2)
    begin
        if (((icmp_ln1844_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_6_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv15_1) + unsigned(input_assign_reg_78));
    i_fu_147_p2 <= std_logic_vector(unsigned(i_0_i_reg_101) + unsigned(ap_const_lv4_1));
    icmp_ln1832_fu_141_p2 <= "1" when (i_0_i_reg_101 = ap_const_lv4_E) else "0";
    icmp_ln1844_fu_129_p2 <= "1" when (input_assign_reg_78 = ap_const_lv15_4000) else "0";
    icmp_ln1846_fu_183_p2 <= "1" when (unsigned(zext_ln1830_reg_205) < unsigned(reversed_reg_90)) else "0";
    input_assign_1_fu_169_p4 <= p_0_i_reg_112(13 downto 1);
    rev_fu_161_p3 <= (trunc_ln1833_fu_153_p1 & trunc_ln1832_fu_157_p1);
    trunc_ln1830_fu_121_p1 <= input_assign_reg_78(14 - 1 downto 0);
    trunc_ln1832_fu_157_p1 <= p_0_i_reg_112(1 - 1 downto 0);
    trunc_ln1833_fu_153_p1 <= reversed_reg_90(31 - 1 downto 0);
    zext_ln1830_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_assign_reg_78),32));
    zext_ln1834_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_assign_1_fu_169_p4),14));
    zext_ln1848_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_assign_reg_78),64));
    zext_ln1849_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reversed_reg_90),64));
end behav;
