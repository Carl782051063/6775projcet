// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bit_reverse_HH_
#define _bit_reverse_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bit_reverse : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > X_R_address0;
    sc_out< sc_logic > X_R_ce0;
    sc_out< sc_logic > X_R_we0;
    sc_out< sc_lv<32> > X_R_d0;
    sc_in< sc_lv<32> > X_R_q0;
    sc_out< sc_lv<14> > X_I_address0;
    sc_out< sc_logic > X_I_ce0;
    sc_out< sc_logic > X_I_we0;
    sc_out< sc_lv<32> > X_I_d0;
    sc_in< sc_lv<32> > X_I_q0;


    // Module declarations
    bit_reverse(sc_module_name name);
    SC_HAS_PROCESS(bit_reverse);

    ~bit_reverse();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > trunc_ln1830_fu_121_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln1830_fu_125_p1;
    sc_signal< sc_lv<32> > zext_ln1830_reg_205;
    sc_signal< sc_lv<15> > i_6_fu_135_p2;
    sc_signal< sc_lv<15> > i_6_reg_213;
    sc_signal< sc_lv<4> > i_fu_147_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > rev_fu_161_p3;
    sc_signal< sc_lv<1> > icmp_ln1832_fu_141_p2;
    sc_signal< sc_lv<14> > zext_ln1834_fu_179_p1;
    sc_signal< sc_lv<1> > icmp_ln1846_fu_183_p2;
    sc_signal< sc_lv<1> > icmp_ln1846_reg_236;
    sc_signal< sc_lv<14> > X_R_addr_2_reg_240;
    sc_signal< sc_lv<14> > X_I_addr_2_reg_245;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<15> > input_assign_reg_78;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > reversed_reg_90;
    sc_signal< sc_lv<1> > icmp_ln1844_fu_129_p2;
    sc_signal< sc_lv<4> > i_0_i_reg_101;
    sc_signal< sc_lv<14> > p_0_i_reg_112;
    sc_signal< sc_lv<64> > zext_ln1849_fu_188_p1;
    sc_signal< sc_lv<64> > zext_ln1848_fu_194_p1;
    sc_signal< sc_lv<31> > trunc_ln1833_fu_153_p1;
    sc_signal< sc_lv<1> > trunc_ln1832_fu_157_p1;
    sc_signal< sc_lv<13> > input_assign_1_fu_169_p4;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<15> ap_const_lv15_4000;
    static const sc_lv<15> ap_const_lv15_1;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_X_I_address0();
    void thread_X_I_ce0();
    void thread_X_I_d0();
    void thread_X_I_we0();
    void thread_X_R_address0();
    void thread_X_R_ce0();
    void thread_X_R_d0();
    void thread_X_R_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_6_fu_135_p2();
    void thread_i_fu_147_p2();
    void thread_icmp_ln1832_fu_141_p2();
    void thread_icmp_ln1844_fu_129_p2();
    void thread_icmp_ln1846_fu_183_p2();
    void thread_input_assign_1_fu_169_p4();
    void thread_rev_fu_161_p3();
    void thread_trunc_ln1830_fu_121_p1();
    void thread_trunc_ln1832_fu_157_p1();
    void thread_trunc_ln1833_fu_153_p1();
    void thread_zext_ln1830_fu_125_p1();
    void thread_zext_ln1834_fu_179_p1();
    void thread_zext_ln1848_fu_194_p1();
    void thread_zext_ln1849_fu_188_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
