-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_we0 : OUT STD_LOGIC;
    X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_we0 : OUT STD_LOGIC;
    X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cosa_lookup_table_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal cosa_lookup_table_ce0 : STD_LOGIC;
    signal cosa_lookup_table_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sina_lookup_table_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sina_lookup_table_ce0 : STD_LOGIC;
    signal sina_lookup_table_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1788_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1788_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1786_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_276_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_reg_425 : STD_LOGIC_VECTOR (13 downto 0);
    signal numBF_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_299_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_443 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1796_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal step_fu_359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_fu_367_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_addr_reg_493 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln1813_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_I_addr_reg_498 : STD_LOGIC_VECTOR (13 downto 0);
    signal X_R_addr_1_reg_503 : STD_LOGIC_VECTOR (13 downto 0);
    signal X_I_addr_1_reg_508 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_5_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_190_ap_start : STD_LOGIC;
    signal grp_bit_reverse_fu_190_ap_done : STD_LOGIC;
    signal grp_bit_reverse_fu_190_ap_idle : STD_LOGIC;
    signal grp_bit_reverse_fu_190_ap_ready : STD_LOGIC;
    signal grp_bit_reverse_fu_190_X_R_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bit_reverse_fu_190_X_R_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_190_X_R_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_190_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_190_X_I_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bit_reverse_fu_190_X_I_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_190_X_I_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_190_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal step_0_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal stage_0_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_158 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_0_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_bit_reverse_fu_190_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln1797_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1816_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1818_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln1786_fu_256_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal DFTpts_fu_266_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1825_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1825_1_fu_325_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1825_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1825_2_fu_345_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1825_1_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1825_1_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_373_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_lower_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_202_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);

    component bit_reverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_faddfsub_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fptrunc_64ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_cosa_lookup_tbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_sina_lookup_tcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    cosa_lookup_table_U : component fft_cosa_lookup_tbkb
    generic map (
        DataWidth => 64,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosa_lookup_table_address0,
        ce0 => cosa_lookup_table_ce0,
        q0 => cosa_lookup_table_q0);

    sina_lookup_table_U : component fft_sina_lookup_tcud
    generic map (
        DataWidth => 64,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sina_lookup_table_address0,
        ce0 => sina_lookup_table_ce0,
        q0 => sina_lookup_table_q0);

    grp_bit_reverse_fu_190 : component bit_reverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bit_reverse_fu_190_ap_start,
        ap_done => grp_bit_reverse_fu_190_ap_done,
        ap_idle => grp_bit_reverse_fu_190_ap_idle,
        ap_ready => grp_bit_reverse_fu_190_ap_ready,
        X_R_address0 => grp_bit_reverse_fu_190_X_R_address0,
        X_R_ce0 => grp_bit_reverse_fu_190_X_R_ce0,
        X_R_we0 => grp_bit_reverse_fu_190_X_R_we0,
        X_R_d0 => grp_bit_reverse_fu_190_X_R_d0,
        X_R_q0 => X_R_q0,
        X_I_address0 => grp_bit_reverse_fu_190_X_I_address0,
        X_I_ce0 => grp_bit_reverse_fu_190_X_I_ce0,
        X_I_we0 => grp_bit_reverse_fu_190_X_I_we0,
        X_I_d0 => grp_bit_reverse_fu_190_X_I_d0,
        X_I_q0 => X_I_q0);

    dut_faddfsub_32nsdEe_U3 : component dut_faddfsub_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        opcode => grp_fu_198_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    dut_faddfsub_32nsdEe_U4 : component dut_faddfsub_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        opcode => grp_fu_202_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);

    dut_fmul_32ns_32neOg_U5 : component dut_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_230,
        din1 => c_reg_478,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p2);

    dut_fmul_32ns_32neOg_U6 : component dut_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_237,
        din1 => s_reg_484,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    dut_fmul_32ns_32neOg_U7 : component dut_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_237,
        din1 => c_reg_478,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    dut_fmul_32ns_32neOg_U8 : component dut_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_230,
        din1 => s_reg_484,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    dut_fptrunc_64ns_fYi_U9 : component dut_fptrunc_64ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cosa_lookup_table_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p1);

    dut_fptrunc_64ns_fYi_U10 : component dut_fptrunc_64ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sina_lookup_table_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bit_reverse_fu_190_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bit_reverse_fu_190_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_bit_reverse_fu_190_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bit_reverse_fu_190_ap_ready = ap_const_logic_1)) then 
                    grp_bit_reverse_fu_190_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_0_reg_181 <= i_1_reg_513;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_reg_181 <= i_cast_reg_435;
            end if; 
        end if;
    end process;

    i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1813_fu_383_p2 = ap_const_lv1_0))) then 
                i_reg_158 <= j_reg_443;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1786_fu_260_p2 = ap_const_lv1_0))) then 
                i_reg_158 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    k_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1813_fu_383_p2 = ap_const_lv1_0))) then 
                k_0_reg_169 <= k_fu_411_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1786_fu_260_p2 = ap_const_lv1_0))) then 
                k_0_reg_169 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    stage_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1796_fu_294_p2 = ap_const_lv1_1))) then 
                stage_0_reg_146 <= stage_fu_367_p2;
            elsif (((grp_bit_reverse_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                stage_0_reg_146 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    step_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1796_fu_294_p2 = ap_const_lv1_1))) then 
                step_0_reg_134 <= step_fu_359_p3;
            elsif (((grp_bit_reverse_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                step_0_reg_134 <= ap_const_lv32_2000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1813_fu_383_p2 = ap_const_lv1_1))) then
                X_I_addr_1_reg_508 <= sext_ln1818_fu_400_p1(14 - 1 downto 0);
                X_I_addr_reg_498 <= sext_ln1816_fu_394_p1(14 - 1 downto 0);
                X_R_addr_1_reg_503 <= sext_ln1818_fu_400_p1(14 - 1 downto 0);
                X_R_addr_reg_493 <= sext_ln1816_fu_394_p1(14 - 1 downto 0);
                i_1_reg_513 <= i_1_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_reg_478 <= grp_fu_222_p1;
                s_reg_484 <= grp_fu_226_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    i_cast_reg_435(13 downto 0) <= i_cast_fu_290_p1(13 downto 0);
                j_reg_443 <= j_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1786_fu_260_p2 = ap_const_lv1_0))) then
                    numBF_reg_430(13 downto 0) <= numBF_fu_286_p1(13 downto 0);
                trunc_ln_reg_425 <= DFTpts_fu_266_p2(14 downto 1);
                    zext_ln1788_reg_420(14 downto 0) <= zext_ln1788_fu_272_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_230 <= X_R_q0;
                reg_237 <= X_I_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_244 <= grp_fu_198_p2;
                reg_250 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_1_reg_528 <= grp_fu_210_p2;
                tmp_2_reg_533 <= grp_fu_214_p2;
                tmp_3_reg_538 <= grp_fu_218_p2;
                tmp_reg_523 <= grp_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_4_reg_543 <= grp_fu_198_p2;
                tmp_5_reg_548 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    zext_ln1788_reg_420(31 downto 15) <= "00000000000000000";
    numBF_reg_430(31 downto 14) <= "000000000000000000";
    i_cast_reg_435(31 downto 14) <= "000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1786_fu_260_p2, ap_CS_fsm_state4, icmp_ln1796_fu_294_p2, ap_CS_fsm_state7, icmp_ln1813_fu_383_p2, grp_bit_reverse_fu_190_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_bit_reverse_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1786_fu_260_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1796_fu_294_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1813_fu_383_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DFTpts_fu_266_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv15_1),to_integer(unsigned('0' & zext_ln1786_fu_256_p1(15-1 downto 0)))));

    X_I_address0_assign_proc : process(ap_CS_fsm_state7, X_I_addr_reg_498, X_I_addr_1_reg_508, grp_bit_reverse_fu_190_X_I_address0, ap_CS_fsm_state2, ap_CS_fsm_state31, sext_ln1816_fu_394_p1, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_I_address0 <= X_I_addr_reg_498;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            X_I_address0 <= X_I_addr_1_reg_508;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_address0 <= sext_ln1816_fu_394_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_address0 <= grp_bit_reverse_fu_190_X_I_address0;
        else 
            X_I_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_ce0_assign_proc : process(ap_CS_fsm_state7, grp_bit_reverse_fu_190_X_I_ce0, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            X_I_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_ce0 <= grp_bit_reverse_fu_190_X_I_ce0;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_d0_assign_proc : process(reg_250, tmp_5_reg_548, grp_bit_reverse_fu_190_X_I_d0, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            X_I_d0 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_I_d0 <= tmp_5_reg_548;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_d0 <= grp_bit_reverse_fu_190_X_I_d0;
        else 
            X_I_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_we0_assign_proc : process(grp_bit_reverse_fu_190_X_I_we0, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            X_I_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_we0 <= grp_bit_reverse_fu_190_X_I_we0;
        else 
            X_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_address0_assign_proc : process(X_R_addr_reg_493, ap_CS_fsm_state7, X_R_addr_1_reg_503, grp_bit_reverse_fu_190_X_R_address0, ap_CS_fsm_state2, ap_CS_fsm_state31, sext_ln1816_fu_394_p1, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_R_address0 <= X_R_addr_reg_493;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            X_R_address0 <= X_R_addr_1_reg_503;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_address0 <= sext_ln1816_fu_394_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_address0 <= grp_bit_reverse_fu_190_X_R_address0;
        else 
            X_R_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_ce0_assign_proc : process(ap_CS_fsm_state7, grp_bit_reverse_fu_190_X_R_ce0, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            X_R_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_ce0 <= grp_bit_reverse_fu_190_X_R_ce0;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_d0_assign_proc : process(reg_244, tmp_4_reg_543, grp_bit_reverse_fu_190_X_R_d0, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            X_R_d0 <= reg_244;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_R_d0 <= tmp_4_reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_d0 <= grp_bit_reverse_fu_190_X_R_d0;
        else 
            X_R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_we0_assign_proc : process(grp_bit_reverse_fu_190_X_R_we0, ap_CS_fsm_state2, ap_CS_fsm_state31, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            X_R_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_we0 <= grp_bit_reverse_fu_190_X_R_we0;
        else 
            X_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1786_fu_260_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1786_fu_260_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln1786_fu_260_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1786_fu_260_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cosa_lookup_table_address0 <= sext_ln1797_fu_305_p1(13 - 1 downto 0);

    cosa_lookup_table_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cosa_lookup_table_ce0 <= ap_const_logic_1;
        else 
            cosa_lookup_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_bit_reverse_fu_190_ap_start <= grp_bit_reverse_fu_190_ap_start_reg;

    grp_fu_198_opcode_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_198_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_198_opcode <= ap_const_lv2_0;
        else 
            grp_fu_198_opcode <= "XX";
        end if; 
    end process;


    grp_fu_198_p0_assign_proc : process(reg_230, tmp_reg_523, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_198_p0 <= reg_230;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_198_p0 <= tmp_reg_523;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p1_assign_proc : process(reg_244, tmp_1_reg_528, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_198_p1 <= reg_244;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_198_p1 <= tmp_1_reg_528;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_opcode_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_202_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_202_opcode <= ap_const_lv2_0;
        else 
            grp_fu_202_opcode <= "XX";
        end if; 
    end process;


    grp_fu_202_p0_assign_proc : process(reg_237, tmp_2_reg_533, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_202_p0 <= reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_202_p0 <= tmp_2_reg_533;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p1_assign_proc : process(reg_250, tmp_3_reg_538, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_202_p1 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_202_p1 <= tmp_3_reg_538;
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_406_p2 <= std_logic_vector(unsigned(zext_ln1788_reg_420) + unsigned(i_0_reg_181));
    i_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_158),32));
    i_lower_fu_389_p2 <= std_logic_vector(signed(i_0_reg_181) + signed(numBF_reg_430));
    icmp_ln1786_fu_260_p2 <= "1" when (stage_0_reg_146 = ap_const_lv4_F) else "0";
    icmp_ln1796_fu_294_p2 <= "1" when (i_reg_158 = trunc_ln_reg_425) else "0";
    icmp_ln1813_fu_383_p2 <= "1" when (signed(tmp_11_fu_373_p4) < signed(ap_const_lv18_1)) else "0";
    j_fu_299_p2 <= std_logic_vector(unsigned(i_reg_158) + unsigned(ap_const_lv14_1));
    k_fu_411_p2 <= std_logic_vector(unsigned(step_0_reg_134) + unsigned(k_0_reg_169));
    lshr_ln1825_1_fu_325_p4 <= sub_ln1825_fu_319_p2(31 downto 1);
    lshr_ln1825_2_fu_345_p4 <= step_0_reg_134(31 downto 1);
    numBF_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_276_p4),32));
        sext_ln1797_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_0_reg_169),64));

        sext_ln1816_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_389_p2),64));

        sext_ln1818_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_181),64));

    sina_lookup_table_address0 <= sext_ln1797_fu_305_p1(13 - 1 downto 0);

    sina_lookup_table_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sina_lookup_table_ce0 <= ap_const_logic_1;
        else 
            sina_lookup_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage_fu_367_p2 <= std_logic_vector(unsigned(stage_0_reg_146) + unsigned(ap_const_lv4_1));
    step_fu_359_p3 <= 
        sub_ln1825_1_fu_339_p2 when (tmp_10_fu_311_p3(0) = '1') else 
        zext_ln1825_1_fu_355_p1;
    sub_ln1825_1_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln1825_fu_335_p1));
    sub_ln1825_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(step_0_reg_134));
    tmp_10_fu_311_p3 <= step_0_reg_134(31 downto 31);
    tmp_11_fu_373_p4 <= i_0_reg_181(31 downto 14);
    trunc_ln_fu_276_p4 <= DFTpts_fu_266_p2(14 downto 1);
    zext_ln1786_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_0_reg_146),15));
    zext_ln1788_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_266_p2),32));
    zext_ln1825_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1825_2_fu_345_p4),32));
    zext_ln1825_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1825_1_fu_325_p4),32));
end behav;
