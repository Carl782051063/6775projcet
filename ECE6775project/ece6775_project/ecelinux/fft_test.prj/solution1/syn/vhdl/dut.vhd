-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.456000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=143,HLS_SYN_DSP=24,HLS_SYN_FF=3319,HLS_SYN_LUT=6090,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (48 downto 0) := "0000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (48 downto 0) := "0000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (48 downto 0) := "0000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (48 downto 0) := "0000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (48 downto 0) := "0000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (48 downto 0) := "0001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (48 downto 0) := "0010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (48 downto 0) := "0100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_6E : STD_LOGIC_VECTOR (7 downto 0) := "01101110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_38800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111000100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv15_28 : STD_LOGIC_VECTOR (14 downto 0) := "000000000101000";
    constant ap_const_lv15_12E8 : STD_LOGIC_VECTOR (14 downto 0) := "001001011101000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_E6 : STD_LOGIC_VECTOR (7 downto 0) := "11100110";
    constant ap_const_lv15_7FC4 : STD_LOGIC_VECTOR (14 downto 0) := "111111111000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal freq_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal freq_V_ce0 : STD_LOGIC;
    signal freq_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1677_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal input_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal input_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_465_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_reg_830 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_2_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0205_0_load_reg_854 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_fu_505_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_863 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1702_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1702_reg_868 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1701_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1702_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1702_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_real_addr_4_reg_884 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_imag_addr_7_reg_890 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal or_ln1712_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1712_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal select_ln1719_fu_637_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln1719_reg_918 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal select_ln1719_1_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1719_1_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1728_fu_658_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1728_reg_928 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal input_real_addr_1_reg_936 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1728_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_imag_addr_1_reg_942 : STD_LOGIC_VECTOR (13 downto 0);
    signal shift_idex_V_fu_684_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shift_idex_V_reg_948 : STD_LOGIC_VECTOR (13 downto 0);
    signal z_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_2_fu_723_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_2_reg_961 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal input_imag_addr_4_reg_966 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1738_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_755_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_3_reg_975 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal input_imag_addr_9_reg_980 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1743_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_787_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_4_reg_989 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal input_real_addr_7_reg_994 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1746_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_imag_addr_10_reg_1000 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_5_fu_805_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_5_reg_1009 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln1750_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_real_ce0 : STD_LOGIC;
    signal input_real_we0 : STD_LOGIC;
    signal input_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_real_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_real_ce1 : STD_LOGIC;
    signal input_real_we1 : STD_LOGIC;
    signal input_real_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_imag_ce0 : STD_LOGIC;
    signal input_imag_we0 : STD_LOGIC;
    signal input_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_imag_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_imag_ce1 : STD_LOGIC;
    signal input_imag_we1 : STD_LOGIC;
    signal input_imag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_fu_396_ap_start : STD_LOGIC;
    signal grp_fft_fu_396_ap_done : STD_LOGIC;
    signal grp_fft_fu_396_ap_idle : STD_LOGIC;
    signal grp_fft_fu_396_ap_ready : STD_LOGIC;
    signal grp_fft_fu_396_X_R_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_fu_396_X_R_ce0 : STD_LOGIC;
    signal grp_fft_fu_396_X_R_we0 : STD_LOGIC;
    signal grp_fft_fu_396_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_fu_396_X_I_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_fu_396_X_I_ce0 : STD_LOGIC;
    signal grp_fft_fu_396_X_I_we0 : STD_LOGIC;
    signal grp_fft_fu_396_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_307 : STD_LOGIC_VECTOR (14 downto 0);
    signal shift_idex_V_1_reg_319 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal t_V_reg_331 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal z_0_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_0_reg_352 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i3_0_reg_363 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i4_0_reg_374 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i5_0_reg_385 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fft_fu_396_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call2 : BOOLEAN;
    signal zext_ln1682_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1704_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_imag_addr_5_gep_fu_189_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1714_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1712_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln544_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1729_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1731_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1739_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1744_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1747_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1751_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0205_0_fu_104 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_0_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1680_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal bitcast_ln1681_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1739_1_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1744_1_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln1495_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln1712_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1712_fu_553_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1712_1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1712_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1719_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_594_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1719_fu_604_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1719_1_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1719_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1719_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1719_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1719_1_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_fu_668_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_672_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln1731_fu_702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1731_fu_707_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln1739_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1739_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1744_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1744_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (48 downto 0);

    component fft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fadd_32ns_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_freq_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dut_input_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    freq_V_U : component dut_freq_V
    generic map (
        DataWidth => 15,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freq_V_address0,
        ce0 => freq_V_ce0,
        q0 => freq_V_q0);

    input_real_U : component dut_input_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_real_address0,
        ce0 => input_real_ce0,
        we0 => input_real_we0,
        d0 => input_real_d0,
        q0 => input_real_q0,
        address1 => input_real_address1,
        ce1 => input_real_ce1,
        we1 => input_real_we1,
        d1 => input_real_d1,
        q1 => input_real_q1);

    input_imag_U : component dut_input_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_imag_address0,
        ce0 => input_imag_ce0,
        we0 => input_imag_we0,
        d0 => input_imag_d0,
        q0 => input_imag_q0,
        address1 => input_imag_address1,
        ce1 => input_imag_ce1,
        we1 => input_imag_we1,
        d1 => input_imag_d1,
        q1 => input_imag_q1);

    grp_fft_fu_396 : component fft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_fu_396_ap_start,
        ap_done => grp_fft_fu_396_ap_done,
        ap_idle => grp_fft_fu_396_ap_idle,
        ap_ready => grp_fft_fu_396_ap_ready,
        X_R_address0 => grp_fft_fu_396_X_R_address0,
        X_R_ce0 => grp_fft_fu_396_X_R_ce0,
        X_R_we0 => grp_fft_fu_396_X_R_we0,
        X_R_d0 => grp_fft_fu_396_X_R_d0,
        X_R_q0 => input_real_q0,
        X_I_address0 => grp_fft_fu_396_X_I_address0,
        X_I_ce0 => grp_fft_fu_396_X_I_ce0,
        X_I_we0 => grp_fft_fu_396_X_I_we0,
        X_I_d0 => grp_fft_fu_396_X_I_d0,
        X_I_q0 => input_imag_q0);

    dut_fadd_32ns_32ng8j_U18 : component dut_fadd_32ns_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_447,
        din1 => reg_453,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    dut_fmul_32ns_32neOg_U19 : component dut_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_433,
        din1 => grp_fu_410_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p2);

    dut_fmul_32ns_32neOg_U20 : component dut_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_440,
        din1 => grp_fu_414_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_414_p2);

    dut_fcmp_32ns_32nhbi_U21 : component dut_fcmp_32ns_32nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_reg_896,
        din1 => grp_fu_422_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_422_opcode,
        dout => grp_fu_422_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fft_fu_396_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_fu_396_ap_start_reg <= ap_const_logic_0;
            else
                if (((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln1738_fu_717_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
                    grp_fft_fu_396_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_fu_396_ap_ready = ap_const_logic_1)) then 
                    grp_fft_fu_396_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1728_fu_662_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i2_0_reg_352 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i2_0_reg_352 <= i_2_reg_961;
            end if; 
        end if;
    end process;

    i3_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i3_0_reg_363 <= i_3_reg_975;
            elsif (((grp_fft_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i3_0_reg_363 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    i4_0_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1743_fu_749_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i4_0_reg_374 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i4_0_reg_374 <= i_4_reg_989;
            end if; 
        end if;
    end process;

    i5_0_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1746_fu_781_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                i5_0_reg_385 <= ap_const_lv15_0;
            elsif (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                i5_0_reg_385 <= i_5_reg_1009;
            end if; 
        end if;
    end process;

    i_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_307 <= i_reg_830;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_307 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    max_0_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1702_reg_880 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                max_0_fu_108 <= select_ln1719_1_reg_923;
            elsif ((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_0_fu_108 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0205_0_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1702_reg_880 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                p_0205_0_fu_104 <= select_ln1719_reg_918;
            elsif ((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0205_0_fu_104 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_433 <= input_real_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                reg_433 <= input_real_q0;
            end if; 
        end if;
    end process;

    reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_440 <= input_imag_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                reg_440 <= input_imag_q0;
            end if; 
        end if;
    end process;

    shift_idex_V_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                shift_idex_V_1_reg_319 <= j_reg_863;
            elsif (((grp_fft_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_idex_V_1_reg_319 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    t_V_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1701_fu_499_p2 = ap_const_lv1_1))) then 
                t_V_reg_331 <= p_0205_0_fu_104;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                t_V_reg_331 <= shift_idex_V_reg_948;
            end if; 
        end if;
    end process;

    z_0_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1701_fu_499_p2 = ap_const_lv1_1))) then 
                z_0_reg_340 <= ap_const_lv8_6E;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                z_0_reg_340 <= z_reg_953;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                i_2_reg_961 <= i_2_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_3_reg_975 <= i_3_fu_755_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                i_4_reg_989 <= i_4_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                i_5_reg_1009 <= i_5_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_830 <= i_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1746_fu_781_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                input_imag_addr_10_reg_1000 <= zext_ln1747_fu_793_p1(14 - 1 downto 0);
                input_real_addr_7_reg_994 <= zext_ln1747_fu_793_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1728_fu_662_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                input_imag_addr_1_reg_942 <= sext_ln544_fu_678_p1(14 - 1 downto 0);
                input_real_addr_1_reg_936 <= sext_ln544_fu_678_p1(14 - 1 downto 0);
                shift_idex_V_reg_948 <= shift_idex_V_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1738_fu_717_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                input_imag_addr_4_reg_966 <= zext_ln1739_fu_729_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1702_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                input_imag_addr_7_reg_890 <= zext_ln1702_reg_868(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1743_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                input_imag_addr_9_reg_980 <= zext_ln1744_fu_761_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_real_addr_4_reg_884 <= zext_ln1702_reg_868(14 - 1 downto 0);
                or_ln1702_reg_880 <= or_ln1702_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_863 <= j_fu_505_p2;
                p_0205_0_load_reg_854 <= p_0205_0_fu_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                max_reg_896 <= grp_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                or_ln1712_reg_903 <= or_ln1712_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_447 <= grp_fu_410_p2;
                reg_453 <= grp_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                select_ln1719_1_reg_923 <= select_ln1719_1_fu_644_p3;
                select_ln1719_reg_918 <= select_ln1719_fu_637_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_2_reg_835 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                z_reg_953 <= z_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1701_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln1702_reg_868(13 downto 0) <= zext_ln1702_fu_511_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    zext_ln1728_reg_928(7 downto 0) <= zext_ln1728_fu_658_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln1702_reg_868(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln1728_reg_928(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_CS_fsm_state2, icmp_ln1677_fu_459_p2, ap_CS_fsm_state3, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state5, icmp_ln1701_fu_499_p2, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state21, icmp_ln1728_fu_662_p2, ap_CS_fsm_state35, icmp_ln1738_fu_717_p2, ap_CS_fsm_state38, icmp_ln1743_fu_749_p2, ap_CS_fsm_state40, icmp_ln1746_fu_781_p2, ap_CS_fsm_state47, icmp_ln1750_fu_799_p2, grp_fft_fu_396_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_fft_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1701_fu_499_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln1728_fu_662_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln1738_fu_717_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state37 => 
                if (((grp_fft_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln1743_fu_749_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln1746_fu_781_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln1750_fu_799_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln1712_fu_575_p2 <= (or_ln1712_fu_569_p2 and grp_fu_422_p2);
    and_ln1719_1_fu_631_p2 <= (grp_fu_422_p2 and and_ln1719_fu_626_p2);
    and_ln1719_fu_626_p2 <= (or_ln1719_fu_620_p2 and or_ln1712_reg_903);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state2_assign_proc : process(strm_in_V_V_empty_n, icmp_ln1677_fu_459_p2)
    begin
                ap_block_state2 <= ((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call2_assign_proc : process(strm_in_V_V_empty_n, icmp_ln1677_fu_459_p2)
    begin
                ap_block_state2_ignore_call2 <= ((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state47, icmp_ln1750_fu_799_p2)
    begin
        if (((icmp_ln1750_fu_799_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47, icmp_ln1750_fu_799_p2)
    begin
        if (((icmp_ln1750_fu_799_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln1680_fu_481_p1 <= tmp_V_2_reg_835;
    bitcast_ln1681_fu_485_p1 <= strm_in_V_V_dout;
    bitcast_ln1712_fu_540_p1 <= max_reg_896;
    bitcast_ln1719_fu_591_p1 <= max_0_fu_108;
    bitcast_ln1739_1_fu_744_p1 <= xor_ln1739_fu_738_p2;
    bitcast_ln1739_fu_734_p1 <= input_imag_q0;
    bitcast_ln1744_1_fu_776_p1 <= xor_ln1744_fu_770_p2;
    bitcast_ln1744_fu_766_p1 <= input_imag_q0;
    freq_V_address0 <= zext_ln1702_fu_511_p1(14 - 1 downto 0);

    freq_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            freq_V_ce0 <= ap_const_logic_1;
        else 
            freq_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_fu_396_ap_start <= grp_fft_fu_396_ap_start_reg;

    grp_fu_410_p1_assign_proc : process(reg_433, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_410_p1 <= ap_const_lv32_38800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_410_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_410_p1 <= reg_433;
        else 
            grp_fu_410_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_414_p1_assign_proc : process(reg_440, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_414_p1 <= ap_const_lv32_38800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_414_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_414_p1 <= reg_440;
        else 
            grp_fu_414_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_opcode_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_422_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_422_opcode <= ap_const_lv5_4;
        else 
            grp_fu_422_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_422_p1_assign_proc : process(ap_CS_fsm_state18, max_0_fu_108, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_422_p1 <= max_0_fu_108;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_422_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_422_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_427_p2 <= (shift_idex_V_1_reg_319 xor ap_const_lv14_3FFF);
    i_2_fu_723_p2 <= std_logic_vector(unsigned(i2_0_reg_352) + unsigned(ap_const_lv15_1));
    i_3_fu_755_p2 <= std_logic_vector(unsigned(i3_0_reg_363) + unsigned(ap_const_lv15_1));
    i_4_fu_787_p2 <= std_logic_vector(unsigned(i4_0_reg_374) + unsigned(ap_const_lv15_1));
    i_5_fu_805_p2 <= std_logic_vector(unsigned(i5_0_reg_385) + unsigned(ap_const_lv15_1));
    i_fu_465_p2 <= std_logic_vector(unsigned(i_0_reg_307) + unsigned(ap_const_lv15_1));
    icmp_ln1494_fu_522_p2 <= "1" when (signed(freq_V_q0) > signed(ap_const_lv15_12E8)) else "0";
    icmp_ln1495_fu_516_p2 <= "1" when (signed(freq_V_q0) < signed(ap_const_lv15_28)) else "0";
    icmp_ln1677_fu_459_p2 <= "1" when (i_0_reg_307 = ap_const_lv15_4000) else "0";
    icmp_ln1701_fu_499_p2 <= "1" when (shift_idex_V_1_reg_319 = ap_const_lv14_2000) else "0";
    icmp_ln1712_1_fu_563_p2 <= "1" when (trunc_ln1712_fu_553_p1 = ap_const_lv23_0) else "0";
    icmp_ln1712_fu_557_p2 <= "0" when (tmp_fu_543_p4 = ap_const_lv8_FF) else "1";
    icmp_ln1719_1_fu_614_p2 <= "1" when (trunc_ln1719_fu_604_p1 = ap_const_lv23_0) else "0";
    icmp_ln1719_fu_608_p2 <= "0" when (tmp_6_fu_594_p4 = ap_const_lv8_FF) else "1";
    icmp_ln1728_fu_662_p2 <= "1" when (z_0_reg_340 = ap_const_lv8_E6) else "0";
    icmp_ln1738_fu_717_p2 <= "1" when (i2_0_reg_352 = ap_const_lv15_4000) else "0";
    icmp_ln1743_fu_749_p2 <= "1" when (i3_0_reg_363 = ap_const_lv15_4000) else "0";
    icmp_ln1746_fu_781_p2 <= "1" when (i4_0_reg_374 = ap_const_lv15_4000) else "0";
    icmp_ln1750_fu_799_p2 <= "1" when (i5_0_reg_385 = ap_const_lv15_4000) else "0";
    input_imag_addr_5_gep_fu_189_p3 <= zext_ln1702_reg_868(14 - 1 downto 0);

    input_imag_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln1702_reg_868, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, input_imag_addr_1_reg_942, ap_CS_fsm_state35, icmp_ln1738_fu_717_p2, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state47, grp_fft_fu_396_X_I_address0, ap_CS_fsm_state4, ap_CS_fsm_state37, zext_ln1682_fu_490_p1, input_imag_addr_5_gep_fu_189_p3, zext_ln1714_fu_581_p1, zext_ln1739_fu_729_p1, zext_ln1744_fu_761_p1, zext_ln1747_fu_793_p1, zext_ln1751_fu_811_p1, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            input_imag_address0 <= zext_ln1751_fu_811_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            input_imag_address0 <= zext_ln1747_fu_793_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            input_imag_address0 <= zext_ln1744_fu_761_p1(14 - 1 downto 0);
        elsif (((icmp_ln1738_fu_717_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            input_imag_address0 <= zext_ln1739_fu_729_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            input_imag_address0 <= input_imag_addr_1_reg_942;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_imag_address0 <= zext_ln1714_fu_581_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1))) then 
            input_imag_address0 <= input_imag_addr_5_gep_fu_189_p3;
        elsif (((or_ln1702_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_imag_address0 <= zext_ln1702_reg_868(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_imag_address0 <= zext_ln1682_fu_490_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_imag_address0 <= grp_fft_fu_396_X_I_address0;
        else 
            input_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_imag_address1_assign_proc : process(ap_CS_fsm_state6, input_imag_addr_7_reg_890, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state27, input_imag_addr_4_reg_966, input_imag_addr_9_reg_980, input_imag_addr_10_reg_1000, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state39, ap_CS_fsm_state46, zext_ln1704_fu_534_p1, sext_ln544_fu_678_p1, zext_ln1729_fu_690_p1, zext_ln1731_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            input_imag_address1 <= input_imag_addr_10_reg_1000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            input_imag_address1 <= input_imag_addr_9_reg_980;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input_imag_address1 <= input_imag_addr_4_reg_966;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_imag_address1 <= zext_ln1731_fu_711_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input_imag_address1 <= zext_ln1729_fu_690_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_imag_address1 <= sext_ln544_fu_678_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_imag_address1 <= input_imag_addr_7_reg_890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_imag_address1 <= zext_ln1704_fu_534_p1(14 - 1 downto 0);
        else 
            input_imag_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_imag_ce0_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state3, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state35, icmp_ln1738_fu_717_p2, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state47, grp_fft_fu_396_X_I_ce0, ap_CS_fsm_state4, ap_CS_fsm_state37, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln1738_fu_717_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)) or ((or_ln1702_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_imag_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_imag_ce0 <= grp_fft_fu_396_X_I_ce0;
        else 
            input_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_imag_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state39, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_imag_ce1 <= ap_const_logic_1;
        else 
            input_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_imag_d0_assign_proc : process(ap_CS_fsm_state3, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, grp_fft_fu_396_X_I_d0, ap_CS_fsm_state4, ap_CS_fsm_state37, bitcast_ln1681_fu_485_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)))) then 
            input_imag_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_imag_d0 <= bitcast_ln1681_fu_485_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_imag_d0 <= grp_fft_fu_396_X_I_d0;
        else 
            input_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_imag_d1_assign_proc : process(reg_453, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state39, ap_CS_fsm_state46, bitcast_ln1739_1_fu_744_p1, bitcast_ln1744_1_fu_776_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            input_imag_d1 <= bitcast_ln1744_1_fu_776_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input_imag_d1 <= bitcast_ln1739_1_fu_744_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            input_imag_d1 <= reg_453;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_imag_d1 <= ap_const_lv32_0;
        else 
            input_imag_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_imag_we0_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state3, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, grp_fft_fu_396_X_I_we0, ap_CS_fsm_state4, ap_CS_fsm_state37, and_ln1712_fu_575_p2)
    begin
        if ((((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = and_ln1712_fu_575_p2) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)))) then 
            input_imag_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_imag_we0 <= grp_fft_fu_396_X_I_we0;
        else 
            input_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_imag_we1_assign_proc : process(or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state39, ap_CS_fsm_state46, and_ln1712_fu_575_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_lv1_1 = and_ln1712_fu_575_p2) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)))) then 
            input_imag_we1 <= ap_const_logic_1;
        else 
            input_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    input_real_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln1702_reg_868, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, input_real_addr_1_reg_936, ap_CS_fsm_state40, ap_CS_fsm_state47, grp_fft_fu_396_X_R_address0, ap_CS_fsm_state4, ap_CS_fsm_state37, zext_ln1682_fu_490_p1, zext_ln1714_fu_581_p1, zext_ln1747_fu_793_p1, zext_ln1751_fu_811_p1, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            input_real_address0 <= zext_ln1751_fu_811_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            input_real_address0 <= zext_ln1747_fu_793_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            input_real_address0 <= input_real_addr_1_reg_936;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_real_address0 <= zext_ln1714_fu_581_p1(14 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)) or ((or_ln1702_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_real_address0 <= zext_ln1702_reg_868(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_real_address0 <= zext_ln1682_fu_490_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_real_address0 <= grp_fft_fu_396_X_R_address0;
        else 
            input_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_real_address1_assign_proc : process(ap_CS_fsm_state6, input_real_addr_4_reg_884, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state27, input_real_addr_7_reg_994, ap_CS_fsm_state34, ap_CS_fsm_state46, zext_ln1704_fu_534_p1, sext_ln544_fu_678_p1, zext_ln1729_fu_690_p1, zext_ln1731_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            input_real_address1 <= input_real_addr_7_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_real_address1 <= zext_ln1731_fu_711_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input_real_address1 <= zext_ln1729_fu_690_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_real_address1 <= sext_ln544_fu_678_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_real_address1 <= input_real_addr_4_reg_884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_real_address1 <= zext_ln1704_fu_534_p1(14 - 1 downto 0);
        else 
            input_real_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_real_ce0_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state3, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state40, ap_CS_fsm_state47, grp_fft_fu_396_X_R_ce0, ap_CS_fsm_state4, ap_CS_fsm_state37, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)) or ((or_ln1702_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_real_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_real_ce0 <= grp_fft_fu_396_X_R_ce0;
        else 
            input_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_real_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_real_ce1 <= ap_const_logic_1;
        else 
            input_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_real_d0_assign_proc : process(ap_CS_fsm_state3, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, grp_fft_fu_396_X_R_d0, ap_CS_fsm_state4, ap_CS_fsm_state37, bitcast_ln1680_fu_481_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)))) then 
            input_real_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_real_d0 <= bitcast_ln1680_fu_481_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_real_d0 <= grp_fft_fu_396_X_R_d0;
        else 
            input_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_real_d1_assign_proc : process(reg_447, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            input_real_d1 <= reg_447;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_real_d1 <= ap_const_lv32_0;
        else 
            input_real_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_real_we0_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state3, or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, grp_fft_fu_396_X_R_we0, ap_CS_fsm_state4, ap_CS_fsm_state37, and_ln1712_fu_575_p2)
    begin
        if ((((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = and_ln1712_fu_575_p2) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)))) then 
            input_real_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_real_we0 <= grp_fft_fu_396_X_R_we0;
        else 
            input_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_real_we1_assign_proc : process(or_ln1702_fu_528_p2, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state34, ap_CS_fsm_state46, and_ln1712_fu_575_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_lv1_1 = and_ln1712_fu_575_p2) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_ln1702_fu_528_p2 = ap_const_lv1_1)))) then 
            input_real_we1 <= ap_const_logic_1;
        else 
            input_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_505_p2 <= std_logic_vector(unsigned(shift_idex_V_1_reg_319) + unsigned(ap_const_lv14_1));
    or_ln1702_fu_528_p2 <= (icmp_ln1495_fu_516_p2 or icmp_ln1494_fu_522_p2);
    or_ln1712_fu_569_p2 <= (icmp_ln1712_fu_557_p2 or icmp_ln1712_1_fu_563_p2);
    or_ln1719_fu_620_p2 <= (icmp_ln1719_fu_608_p2 or icmp_ln1719_1_fu_614_p2);
    ret_V_fu_672_p2 <= std_logic_vector(unsigned(zext_ln215_fu_668_p1) + unsigned(ap_const_lv15_7FC4));
    select_ln1719_1_fu_644_p3 <= 
        max_reg_896 when (and_ln1719_1_fu_631_p2(0) = '1') else 
        max_0_fu_108;
    select_ln1719_fu_637_p3 <= 
        shift_idex_V_1_reg_319 when (and_ln1719_1_fu_631_p2(0) = '1') else 
        p_0205_0_load_reg_854;
        sext_ln1731_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln1731_fu_702_p2),14));

        sext_ln544_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_672_p2),64));

    shift_idex_V_fu_684_p2 <= std_logic_vector(unsigned(t_V_reg_331) + unsigned(ap_const_lv14_1));

    strm_in_V_V_blk_n_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln1677_fu_459_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln1677_fu_459_p2, ap_CS_fsm_state3)
    begin
        if ((((strm_in_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln1677_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_out_V_V_din_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state48, ap_CS_fsm_state49, tmp_V_fu_817_p1, tmp_V_1_fu_822_p1)
    begin
        if ((strm_out_V_V_full_n = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                strm_out_V_V_din <= tmp_V_1_fu_822_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                strm_out_V_V_din <= tmp_V_fu_817_p1;
            else 
                strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if ((((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_594_p4 <= bitcast_ln1719_fu_591_p1(30 downto 23);
    tmp_V_1_fu_822_p1 <= reg_440;
    tmp_V_fu_817_p1 <= input_real_q0;
    tmp_fu_543_p4 <= bitcast_ln1712_fu_540_p1(30 downto 23);
    trunc_ln1712_fu_553_p1 <= bitcast_ln1712_fu_540_p1(23 - 1 downto 0);
    trunc_ln1719_fu_604_p1 <= bitcast_ln1719_fu_591_p1(23 - 1 downto 0);
    xor_ln1731_fu_702_p2 <= (zext_ln1728_reg_928 xor ap_const_lv9_1FF);
    xor_ln1739_fu_738_p2 <= (bitcast_ln1739_fu_734_p1 xor ap_const_lv32_80000000);
    xor_ln1744_fu_770_p2 <= (bitcast_ln1744_fu_766_p1 xor ap_const_lv32_80000000);
    z_fu_696_p2 <= std_logic_vector(unsigned(z_0_reg_340) + unsigned(ap_const_lv8_1));
    zext_ln1682_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_307),64));
    zext_ln1702_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_idex_V_1_reg_319),64));
    zext_ln1704_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_427_p2),64));
    zext_ln1714_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_427_p2),64));
    zext_ln1728_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_0_reg_340),9));
    zext_ln1729_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_0_reg_340),64));
    zext_ln1731_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1731_fu_707_p1),64));
    zext_ln1739_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_352),64));
    zext_ln1744_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_363),64));
    zext_ln1747_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_374),64));
    zext_ln1751_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_385),64));
    zext_ln215_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_331),15));
end behav;
